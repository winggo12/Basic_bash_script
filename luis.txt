Certainly, you can add a condition to the policy to restrict access to secrets with a specific tag. Here's an updated version of the policy that includes a condition for the "mox.owner" tag:

```json
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:PutSecretValue",
                "secretsmanager:CreateSecret",
                "secretsmanager:DeleteSecret"
            ],
            "Resource": [
                "arn:aws:secretsmanager:*:*:secret:*"
            ],
            "Condition": {
                "StringEquals": {
                    "aws:ResourceTag/mox.owner": "application-foundation"
                }
            }
        },
        {
            "Effect": "Allow",
            "Action": [
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:CreateKey",
                "kms:DeleteKey"
            ],
            "Resource": [
                "arn:aws:kms:*:*:key/*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "acm:ImportCertificate",
                "acm:ExportCertificate",
                "acm:DescribeCertificate",
                "acm:ListTagsForCertificate",
                "acm:AddTagsToCertificate",
                "acm:RemoveTagsFromCertificate"
            ],
            "Resource": [
                "arn:aws:acm:*:*:certificate/*"
            ]
        }
    ]
}
```

The added condition in the Secrets Manager section restricts access to only those secrets that have the "mox.owner" tag set to "application-foundation". This means that the IAM role or user with this policy will only be able to read and write secrets that have this specific tag.

Remember to attach this updated policy to the relevant IAM role or user to enforce the tag-based access control.